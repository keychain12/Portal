server:
  port: 8080  # Gateway가 실행될 포트 (클라이언트의 단일 진입점)

spring:
  application:
    name: gateway-service  # Eureka에 등록될 서비스 이름
  
  # Redis 설정 (JWT 토큰 블랙리스트, 캐싱 용도)
  data:
    redis:
      host: localhost
      port: 6379
  
  cloud:
    gateway:
      # CORS 설정 제거 - 각 서비스에서 처리하도록
      
      # 라우팅 규칙 정의
      routes:
        # 인증 서비스 라우팅 (API prefix 없이)
        - id: auth-service-direct
          uri: lb://auth-service
          predicates:
            - Path=/auth/**  # /auth/** 로 들어오는 요청을 auth-service로 전달
          # filters 제거: /auth/login → /auth/login 그대로 전달
        
        # 인증 서비스 라우팅 (API prefix 있는 경우도 지원)
        - id: auth-service-api
          uri: lb://auth-service
          predicates:
            - Path=/api/auth/**  # /api/auth/** 로 들어오는 요청도 처리
          filters:
            - StripPrefix=2  # /api/auth/login -> /login 으로 변경
        
        # 워크스페이스 서비스 라우팅  
        - id: workspace-service
          uri: lb://workspace-service  # Eureka에서 workspace-service 인스턴스 찾기
          predicates:
            - Path=/api/workspaces/**  # /api/workspaces/** 요청을 workspace-service로
          filters:
            - RewritePath=/api/workspaces/(?<path>.*), /api/workspaces/$\{path}  # 경로 유지
        
        # 채팅/상호작용 서비스 라우팅
        - id: interaction-service  
          uri: lb://interaction-service
          predicates:
            - Path=/api/channels/**, /api/chat/**, /ws/**  # 채널, 채팅, 웹소켓 경로
          filters:
            - RewritePath=/api/(?<path>.*), /api/$\{path}  # API 경로 유지
        
        # 파일 업로드 라우팅 (interaction-service)
        - id: file-upload
          uri: lb://interaction-service
          predicates:
            - Path=/api/files/**
          filters:
            - RewritePath=/api/files/(?<path>.*), /api/files/$\{path}

      # 기본 필터 (모든 요청에 적용) - 임시로 모든 필터 제거
      # default-filters:

# Eureka Client 설정
eureka:
  client:
    service-url:
      default-zone: http://localhost:8761/eureka  # Eureka Server 주소
    register-with-eureka: true  # 자신을 Eureka에 등록
    fetch-registry: true        # 다른 서비스 정보 가져오기
  instance:
    prefer-ip-address: true     # IP 주소 사용 (Docker 환경에서 유용)
    instance-id: ${spring.application.name}:${server.port}

# JWT 설정
jwt:
  secret:
    key: TVlfU0VDUkVUX0tFWV9NVVNUX0JFX0xPTkdfRU5PVUdIX0ZPUl9IUzI1Nl9BTEdPUklUSE0=  # 다른 서비스와 동일한 시크릿

# 로깅 설정
logging:
  level:
    org.springframework.cloud.gateway: DEBUG  # Gateway 로그 상세히
    com.example.gatewayservice: DEBUG
    reactor.netty: DEBUG  # WebFlux 네트워크 로그

# Actuator 설정 (모니터링)
management:
  endpoints:
    web:
      exposure:
        include: health,info,gateway,routes  # Gateway 라우트 정보 노출
  endpoint:
    gateway:
      enabled: true  # /actuator/gateway/routes 엔드포인트 활성화